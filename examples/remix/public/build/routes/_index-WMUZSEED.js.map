{
  "version": 3,
  "sources": ["../../../app/routes/_index.tsx"],
  "sourcesContent": ["import * as DS from '@tokenami/example-design-system';\nimport { TokenamiStyle, css } from '~/css';\n\nexport default function Index() {\n  return (\n    <>\n      <figure\n        style={css({\n          '--bg': 'var(--color_white)',\n          '--border-radius': 'var(--radii_lg)',\n          '--text-align': 'center',\n          '--overflow': 'hidden',\n          '--m': 10,\n          '--px': 8,\n          '--py': 8,\n          '--md_display': 'flex',\n          '--md_p': 0,\n          '--md_text-align': 'left',\n          '--font-family': 'var(--font_sans)',\n          '--line-height': 'var(--leading_loose)',\n          '--after_content': 'var(--pet_favourite)',\n          '--md_after_content': 'var(---, \"\uD83D\uDC20\")',\n        })}\n      >\n        <QuoteImage />\n        <div style={css({ '--pt': 4, '--md_p': 8 })}>\n          <blockquote style={css({ '--m': 0 })}>\n            <p\n              style={css({\n                '--font-size': 'var(--text-size_lg)',\n                '--line-height': 'var(--leading_7)',\n                '--font-weight': 'var(--weight_medium)',\n                '--m': 0,\n                '--mb': 4,\n                '--selection_background-color': 'var(--color_indigo10)',\n                '--selection_color': 'var(--color_white)',\n              })}\n            >\n              \"Like Tailwind, but atomic tokens.\"\n            </p>\n            <div style={css({ '--m': 5 })}>\n              <div style={css({ '--mx': 3 })}>\n                <div style={css({ '--ml': 12 })}>Testing aliases</div>\n              </div>\n            </div>\n          </blockquote>\n\n          <figcaption style={css({ '--font-weight': 'var(--weight_medium)' })}>\n            <div style={css({ '--color': 'var(--color_indigo10)' })}>Jenna Smith</div>\n            <div style={css({ '--color': 'var(--color_amber12)' })}>@jjenzz</div>\n          </figcaption>\n        </div>\n      </figure>\n\n      <div style={css({ '--mb': 5, '--p': 5, '--border': 'var(--line_px)' })}>\n        boop\n        <div\n          style={css({\n            '--p': 'inherit',\n            '--background-color': 'var(--color_amber12)',\n            '--color': 'var(--color_amber9)',\n          })}\n        >\n          Testing inherit\n        </div>\n      </div>\n\n      <div\n        style={css({\n          '--prose-p_background-color': 'var(--color_red8)',\n          '--prose-card_background-color': 'var(--color_amber8)',\n          '--my': 10,\n        })}\n      >\n        Testing prose\n        <div className=\"card\">\n          <p>i should be red</p>\n          <span>i should be amber</span>\n        </div>\n      </div>\n\n      <button\n        style={css({\n          '--border-block-end': 'var(---, 1px solid var(--color_amber12))',\n          '--width': 'var(---,180px)',\n          '--height': 15,\n          '--border-radius': 'var(--radii_3xl)',\n          '--border': 'var(--line_0)',\n          '--font-family': 'var(--font_sans)',\n          '--font-size': 'var(--text-size_xl)',\n          '--xxl_font-size': 'var(--text-size_4xl)',\n          '--bg': 'var(--color_amber9)',\n          '--hover_background-color': 'var(--color_amber12)',\n          '--hover_color': 'var(---,white)',\n          '--transition': 'var(--morph_all)',\n          '--hover_animation': 'var(--anim_pulse)',\n          '--{&:focus:hover}_background-color': 'var(--color_indigo10)',\n          '--radius-top': 'var(--radii_xl)',\n        })}\n      >\n        Button\n      </button>\n      <DS.Button style={{ '--border-color': 'var(---, red)' }}>Button</DS.Button>\n    </>\n  );\n}\n\nconst QuoteImage = (props: TokenamiStyle<React.ComponentProps<'img'>>) => {\n  const [cn, style] = quoteImage({ variant: 'circle', md_variant: 'fill' });\n  return (\n    <img\n      className={cn(props.className)}\n      style={style(props.style)}\n      src=\"/me.jpg\"\n      alt=\"\"\n      width=\"400\"\n      height=\"400\"\n    />\n  );\n};\n\nconst quoteImage = css.compose({\n  '--object-fit': 'cover',\n\n  responsiveVariants: {\n    variant: {\n      circle: {\n        '--width': 24,\n        '--height': 24,\n        '--border-radius': 'var(--radii_full)',\n      },\n      fill: {\n        '--width': 'var(---,11rem)',\n        '--height': 'var(--size_auto)',\n        '--border-radius': 'var(--radii_none)',\n      },\n    },\n  },\n});\n"],
  "mappings": "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",
  "names": []
}
